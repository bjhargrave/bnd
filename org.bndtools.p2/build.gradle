/*
 * org.bndtools.p2 Gradle build script
 */

import aQute.bnd.osgi.Jar
import org.apache.tools.ant.filters.ReplaceTokens
import javax.inject.Inject

interface Injected {
    @Inject ObjectFactory getObjects() 
    @Inject ExecOperations getExec() 
    @Inject FileSystemOperations getFs() 
}

/* Configure this project */
String mainVersion = String.format('%s-%s-g%.7s',
                          bnd('gittag'),
                          bnd('timestamp'),
                          bnd('Git-SHA'))

def p2Plugins = tasks.register('p2Plugins', Sync.class) {
  dependsOn 'jarDependencies'
  from    bnd('plugins').tokenize(',')
  into    project.layout.buildDirectory.dir('plugins')
}

def p2FeatureProperties = tasks.register('p2FeatureProperties', WriteProperties.class) {
  inputs.files p2Plugins
  outputFile = project.layout.buildDirectory.file('feature.properties')
  def injected = project.objects.newInstance(Injected) 
  def p2PluginsDir = p2Plugins.map { it.destinationDir }
  doFirst {
    injected.objects.fileTree().from(p2PluginsDir).each {
      new Jar(it).withCloseable { jar ->
        property("${jar.getBsn()}-version", jar.getVersion())
      }
    }
  }
}

def p2FeatureMain = tasks.register('p2FeatureMain', Zip.class) {
  inputs.files p2FeatureProperties
  destinationDirectory = project.layout.buildDirectory.dir('features')
  archiveFileName = 'bndtools.main.feature.jar'
  from             'features/bndtools.main'
  include          'feature.xml'
  def propertiesFile = p2FeatureProperties.map { it.outputFile }
  doFirst {
    Properties properties = new Properties()
    propertiesFile.get().withInputStream {
        properties.load(it)
        properties['main-version'] = mainVersion
    }
    filter(ReplaceTokens, tokens: properties)
  }
}

def p2FeatureM2e = tasks.register('p2FeatureM2e', Zip.class) {
  inputs.files p2FeatureProperties
  destinationDirectory = project.layout.buildDirectory.dir('features')
  archiveFileName    = 'bndtools.m2e.feature.jar'
  from             'features/bndtools.m2e'
  include          'feature.xml'
  def propertiesFile = p2FeatureProperties.map { it.outputFile }
  doFirst {
    Properties properties = new Properties()
    propertiesFile.get().withInputStream {
        properties.load(it)
        properties['main-version'] = mainVersion
    }
    filter(ReplaceTokens, tokens: properties)
  }
}

def p2FeaturePde = tasks.register('p2FeaturePde', Zip.class) {
  inputs.files p2FeatureProperties
  destinationDirectory = project.layout.buildDirectory.dir('features')
  archiveFileName    = 'bndtools.pde.feature.jar'
  from             'features/bndtools.pde'
  include          'feature.xml'
  def propertiesFile = p2FeatureProperties.map { it.outputFile }
  doFirst {
    Properties properties = new Properties()
    propertiesFile.get().withInputStream {
        properties.load(it)
        properties['main-version'] = mainVersion
    }
    filter(ReplaceTokens, tokens: properties)
  }
}

def p2 = tasks.register('p2') {
  description 'Publish the p2 repositories.'
  group       'release'
  enabled JavaVersion.current().isJava8()
  inputs.files p2Plugins, p2FeatureMain, p2FeatureM2e, p2FeaturePde, 'p2.xml', 'features/category.xml'
  def injected = project.objects.newInstance(Injected) 
  def buildDirectoryProperty = project.layout.buildDirectory
  ext.destinationDirectory = buildDirectoryProperty.dir('p2')
  outputs.dir destinationDirectory
  def eclipseDir = file('eclipse-3.5.2')
  def categoryURI = uri('features/category.xml')
  doLast {
    injected.exec.javaexec {
      classpath "${eclipseDir}/plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar"
      main = 'org.eclipse.equinox.launcher.Main'
      if (logger.isDebugEnabled()) {
        args '-consoleLog'
      }
      args '-application'
      args 'org.eclipse.ant.core.antRunner'
      args '-data'
      args buildDirectoryProperty.get().asFile
      if (logger.isDebugEnabled()) {
        args '-debug'
      } else {
        args '-quiet'
      }
      args '-buildfile'
      args 'p2.xml'
      args 'p2Bndtools'
    }.assertNormalExitValue()

    injected.exec.javaexec {
      classpath "${eclipseDir}/plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar"
      main = 'org.eclipse.equinox.launcher.Main'
      if (logger.isDebugEnabled()) {
        args '-consoleLog'
      }
      args '-application'
      args 'org.eclipse.equinox.p2.publisher.CategoryPublisher'
      args '-data'
      args buildDirectoryProperty.get().asFile
      args '-metadataRepository'
      args destinationDirectory.get().asFile.toURI()
      args '-categoryDefinition'
      args categoryURI
      args '-compress'
    }.assertNormalExitValue()

    injected.fs.delete {
      delete fileTree(eclipseDir).include('configuration/*.log'),
        "${eclipseDir}/configuration/org.eclipse.core.runtime",
        "${eclipseDir}/configuration/org.eclipse.equinox.app",
        "${eclipseDir}/configuration/org.eclipse.osgi",
        "${eclipseDir}/p2"
      }
    }
}

tasks.named('jar') {
  inputs.files p2
}

tasks.named('release') {
  onlyIf {
    JavaVersion.current().isJava8()
  }
}
